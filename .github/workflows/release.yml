name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .

    - name: Extract version from tag
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update version in files
      run: |
        # Update version in pyproject.toml
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.VERSION }}"/' pyproject.toml
        # Update version in setup.py
        sed -i 's/version=".*"/version="${{ steps.version.outputs.VERSION }}"/' setup.py
        # Update version in __init__.py
        sed -i 's/__version__ = ".*"/__version__ = "${{ steps.version.outputs.VERSION }}"/' day_supply_national/__init__.py

    - name: Run tests
      run: |
        python -c "
        from day_supply_national.test_suite import ComprehensiveTestSuite
        suite = ComprehensiveTestSuite()
        results = suite.run_all_tests()
        if results['failed'] > 0:
            print(f'❌ Tests failed: {results[\"failed\"]} failures')
            exit(1)
        print(f'✅ All {results[\"total_tests\"]} tests passed!')
        "

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        python -c "
        import re
        with open('CHANGELOG.md', 'r') as f:
            content = f.read()
        
        # Find the section for this version
        version = '${{ steps.version.outputs.VERSION }}'
        pattern = rf'## \[{re.escape(version)}\].*?(?=## \[|\Z)'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            changelog = match.group(0).strip()
            # Remove the version header
            changelog = re.sub(rf'## \[{re.escape(version)}\].*?\n', '', changelog).strip()
        else:
            changelog = f'Release {version}'
        
        # Save to file for GitHub release
        with open('release_notes.md', 'w') as f:
            f.write(changelog)
        print('✅ Changelog extracted')
        "

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: PAAS National v${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/paas_national_prescription_extractor-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_name: paas-national-prescription-extractor-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Create summary
      run: |
        echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: paas-national-prescription-extractor" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI**: https://pypi.org/project/paas-national-prescription-extractor/${{ steps.version.outputs.VERSION }}/" >> $GITHUB_STEP_SUMMARY
        echo "- **Installation**: \`pip install paas-national-prescription-extractor==${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Files Published" >> $GITHUB_STEP_SUMMARY
        ls -la dist/ >> $GITHUB_STEP_SUMMARY
